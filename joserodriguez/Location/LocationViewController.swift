//
//  LocationViewController.swift
//  joserodriguez
//
//  Created WHIZ on 23/12/22.
//  Copyright © 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by UPAX Zeus
//

import UIKit
import MapKit
import SDWebImage
class LocationViewController: UIViewController {
    
    
    
	var presenter: LocationPresenterProtocol?
    
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var iconLocation: UIImageView!
    
    @IBOutlet weak var lblLocation: UILabel!
    
    @IBOutlet weak var lblCity: UILabel!
    
    
    @IBOutlet weak var lblCountry: UILabel!
    
    @IBOutlet weak var lblC: UILabel!
    
    @IBOutlet weak var lblPertly: UILabel!
    
    @IBOutlet weak var viewContainLocation: UIView!
    
    
    
    let locationManager = CLLocationManager()
    
    
    var latitud: Double = 0.0
    var logitud: Double = 0.0
    
	override func viewDidLoad() {
        super.viewDidLoad()
        self.showLoader()
        self.navigationItem.title = "Location"
        setupLocation()
        setupview()
        loadData()
      
    }
    
    func loadData() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5, execute: { [self] in
            self.initLocation()
           
        })
      
    }
    
    func setupview(){
        self.viewContainLocation.layer.cornerRadius = 20
        self.viewContainLocation.clipsToBounds = true
    }
    
    func setupLocation() {
        mapView.showsUserLocation = true
        self.locationManager.delegate = self
        self.locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        self.locationManager.startUpdatingLocation()
        
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(locationTapped(tapGestureRecognizer:)))
        iconLocation.isUserInteractionEnabled = true
        iconLocation.addGestureRecognizer(tapGestureRecognizer)
        
      
        
        let tapGestureLocation = UITapGestureRecognizer(target: self, action:  #selector(self.gestureAction(tapGestureRecognizer:)))
        mapView.addGestureRecognizer(tapGestureLocation)
    }
    
    @objc func locationTapped(tapGestureRecognizer: UITapGestureRecognizer) {
        self.initLocation()
        self.showLoader()
    }
    
    func initLocation() {
        let permis =  CLLocationManager.authorizationStatus()
        if permis == .notDetermined {
            locationManager.requestWhenInUseAuthorization()
        } else if permis == .denied {
            
            self.showToast(message: "Localización denegada", font: .systemFont(ofSize: 14))
        } else if permis == .restricted  {
            self.showToast(message: "Localización restringida", font: .systemFont(ofSize: 14))
            
        } else {
            guard let currectCoordinate = locationManager.location?.coordinate else {
                return
            }
            
            
            let latitudinalMeters: CLLocationDistance = 500
            let longitudinalMeters: CLLocationDistance = 500
            print("latitud: \(latitud) logitud: \(logitud)")
           // self.saveDelegate?.saveLocation(latitude: self.latitud.description, longitude: self.logitud.description)
            self.presenter?.prepareResponseForModel(lat: self.latitud.description, lon: self.logitud.description)
            
            let region = MKCoordinateRegion(center: currectCoordinate, latitudinalMeters: latitudinalMeters, longitudinalMeters: longitudinalMeters)
            mapView.setRegion(region, animated: true)
            
        }
    }
    
    
    @objc func gestureAction(tapGestureRecognizer: UITapGestureRecognizer) {
        self.mapView.removeAnnotations(mapView.annotations)
        let touchPoint = tapGestureRecognizer.location(in:  mapView)
        let newCoord = mapView.convert(touchPoint, toCoordinateFrom: mapView)
        let annotation = MKPointAnnotation()
        annotation.coordinate = newCoord
        mapView.addAnnotation(annotation)
    }
    
    
}

extension LocationViewController: CLLocationManagerDelegate {
   
        
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("Error Location")
    }

    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let newLocation = locations.last else { return }
        let userCoord = newLocation.coordinate
      
        self.latitud =  Double(userCoord.latitude)
        self.logitud =   Double(userCoord.longitude)
       
    }
    
}

extension LocationViewController: MKMapViewDelegate {
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        if annotation is MKUserLocation {
            return nil
        }
        
        let ping = MKPinAnnotationView(annotation: annotation, reuseIdentifier: "pin")
        return ping
    }
    
    
    
}

extension LocationViewController:  LocationViewProtocol {
    func fetchedData(data: LocationResponse) {
        self.lblLocation.text = data.sys.country
        self.lblCity.text =  data.name
        self.lblCountry.text =  data.sys.country
        self.lblPertly.text = data.name
        self.lblC.text = "27º C"
        
        let codeIcon = data.weather[0].icon
        let base =  Constant.Endpoint.baseURL
        let iconurl =  Constant.IconURL.apiIcon
        let iconURLComplet = base+iconurl+codeIcon.description+"@2x.png"
        
        print("ICON -> ",iconURLComplet )
        
        //iconLocation.loadFrom(URLAddress: iconURLComplet)
        iconLocation.sd_setImage(with: URL(string: iconURLComplet), placeholderImage: UIImage(named: "nubes-y-sol"))

        print("ADD liobrerias")
        
    }
    
}


